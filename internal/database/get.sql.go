// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: get.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const addUser = `-- name: AddUser :one
INSERT INTO USERS (username, hash)
VALUES ($1, $2)
RETURNING username, hash
`

type AddUserParams struct {
	Username string
	Hash     string
}

func (q *Queries) AddUser(ctx context.Context, arg AddUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, addUser, arg.Username, arg.Hash)
	var i User
	err := row.Scan(&i.Username, &i.Hash)
	return i, err
}

const createUserComment = `-- name: CreateUserComment :one
INSERT INTO COMMENTS (comment, post_id, username)
VALUES ($1, $2, $3)
RETURNING comment_id, comment, post_id, username
`

type CreateUserCommentParams struct {
	Comment  string
	PostID   uuid.UUID
	Username string
}

func (q *Queries) CreateUserComment(ctx context.Context, arg CreateUserCommentParams) (Comment, error) {
	row := q.db.QueryRowContext(ctx, createUserComment, arg.Comment, arg.PostID, arg.Username)
	var i Comment
	err := row.Scan(
		&i.CommentID,
		&i.Comment,
		&i.PostID,
		&i.Username,
	)
	return i, err
}

const createUserPost = `-- name: CreateUserPost :one
INSERT INTO POSTS (post, username)
VALUES ($1, $2)
RETURNING post_id, post, username
`

type CreateUserPostParams struct {
	Post     string
	Username string
}

func (q *Queries) CreateUserPost(ctx context.Context, arg CreateUserPostParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, createUserPost, arg.Post, arg.Username)
	var i Post
	err := row.Scan(&i.PostID, &i.Post, &i.Username)
	return i, err
}

const getFeed = `-- name: GetFeed :many
SELECT 
  POSTS.post_id,
  POSTS.post,
  POSTS.username AS username_post,
  COALESCE(array_agg(COMMENTS.comment) FILTER (WHERE COMMENTS.comment IS NOT NULL), '{}') AS comments,
  COALESCE(array_agg(COMMENTS.username) FILTER (WHERE COMMENTS.username IS NOT NULL), '{}') AS commenter_usernames
FROM POSTS
LEFT JOIN COMMENTS ON COMMENTS.post_id = POSTS.post_id
GROUP BY POSTS.post_id, POSTS.post, POSTS.username
`

type GetFeedRow struct {
	PostID             uuid.UUID
	Post               string
	UsernamePost       string
	Comments           interface{}
	CommenterUsernames interface{}
}

func (q *Queries) GetFeed(ctx context.Context) ([]GetFeedRow, error) {
	rows, err := q.db.QueryContext(ctx, getFeed)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFeedRow
	for rows.Next() {
		var i GetFeedRow
		if err := rows.Scan(
			&i.PostID,
			&i.Post,
			&i.UsernamePost,
			&i.Comments,
			&i.CommenterUsernames,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUser = `-- name: GetUser :one
SELECT username, hash FROM USERS
WHERE username = $1
`

func (q *Queries) GetUser(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, username)
	var i User
	err := row.Scan(&i.Username, &i.Hash)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT username, hash FROM USERS
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(&i.Username, &i.Hash); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
